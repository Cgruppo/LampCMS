<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is lisensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 * 	  the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website\'s Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attibutes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2011 (or current year) ExamNotes.net inc.
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: @package_version@
 *
 *
 */


namespace Lampcms;

class ShowFollowers extends LampcmsObject
{
	protected $oCursor;

	/**
	 * Maximum number of users
	 * in one block
	 * The block is the block with small
	 * avatars shown in the column to show
	 * "Some" followers of the question or a user
	 *
	 *
	 * @var int
	 */
	protected $maxPerBlock = 20;

	public function __construct(Registry $oRegistry){
		$this->oRegistry = $oRegistry;
	}


	/**
	 * Setter of maxPerBlock var
	 *
	 * @param int $max
	 * @throws \InvalidArgumentException if $max is not numeric
	 */
	public function setMaxPerBlock($max){
		if(!is_numeric($max) || $max < 1){
			throw new \InvalidArgumentException('$max must be numeric value greater than 0. was: '.$max);
		}

		$this->maxPerBlock = (int)$max;

		return $this;
	}


	/**
	 *
	 * Get parsed html with divs
	 * of followers, one such div includes
	 * an avatar and some info in the title of the div
	 *
	 * @param array $aUids array of userIDs. The divs with
	 * info for these users will be returned
	 *
	 * @return string html
	 */
	public function getQuestionFollowers(array $aUids, $total = null){
		d('aUids: '.print_r($aUids, 1));

		if(count($aUids) > $this->maxPerBlock){
			$aUids = array_splice($aUids, 0, $this->maxPerBlock);
		}

		$where = array('_id' => array('$in' => $aUids), 'role' => array('$ne' => 'deleted'));

		$this->oCursor = $this->oRegistry->Mongo->USERS->find(
		$where, array(
			'_id', 
			'i_rep', 
			'username', 
			'fn', 
			'mn', 
			'ln',  
			'email', 
			'avatar', 
			'avatar_external')
		);

		$total = ($total) ? $total : $this->oCursor->count();
		
		/**
		 * @todo translate string title
		 * 
		 */
		$title = $total.' ';
		$title .= (1 === $total) ? 'person' : 'people';
		$title .= ' following this question';

		d('followers title: '.$title);

		$followers = \tplOneFollower::loop($this->oCursor);

		/**
		 * @todo translate title string
		 */
		return \tplFollowers::parse(array($title, $followers, $total), false);
	}



	public function getTagFollowers($tag){
		$where = array('a_f_t' => $tag, 'role' => array('$ne' => 'deleted'));
		$this->oCursor = $this->oRegistry->Mongo->USERS->find(
		$where, array(
			'_id', 
			'i_rep', 
			'username', 
			'fn', 
			'mn', 
			'ln',  
			'email', 
			'avatar', 
			'avatar_external')
		);

		$total = $this->oCursor->count();

		d('total tag followers: '.$total);
		$this->oCursor->limit($this->maxPerBlock);
		d('total tag followers: '.$total);
		
		$title = $total.' ';
		$title .= (1 === $total) ? 'person' : 'people';
		$title .= ' following this tag';

		d('followers title: '.$title);

		$followers = \tplOneFollower::loop($this->oCursor);

		/**
		 * @todo translate title string
		 */
		return \tplFollowers::parse(array($title, $followers, $total), false);

	}

}
