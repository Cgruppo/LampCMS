<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is lisensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 * 	  the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website\'s Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attibutes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2011 (or current year) ExamNotes.net inc.
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: @package_version@
 *
 *
 */


namespace Lampcms;

class Mailer extends LampcmsObject
{

	protected $adminEmail;

	protected $siteName;

	protected $from;

	public function __construct(Registry $oRegistry){
		$this->oRegistry = $oRegistry;
		$this->adminEmail = $this->oRegistry->Ini->EMAIL_ADMIN;
		$this->siteName = $this->oRegistry->Ini->SITE_NAME;
		$this->from = \Lampcms\String::prepareEmail($this->adminEmail, $this->siteName);
	}


	/**
	 *
	 * Sends our emails using the mail()
	 * but inside the register_shutdown_function()
	 * This way function returns immediately
	 *
	 * Also accept Iteractor so we can use the
	 * cursor in place of $to
	 *
	 * Has the ability to pass in
	 * callback function and that function
	 * would return email address or false
	 * if email should not be sent
	 * This will be used if $to is iterator or array
	 * and contains fields like e_ft = null or does not exist
	 * So we can check if (empty($a['e_ft']){
	 *  return flase // skip this one
	 * } else {
	 *  return $a['email'];
	 * }
	 *
	 *
	 * @param mixed $to
	 * @param string $subject
	 * @param string $body
	 *
	 * @param function $func callback function to be applied
	 * to each record of the array.
	 *
	 * @throws DevException
	 */
	public function mail($to, $subject, $body, $func = null){

		if(!is_string($to) && !is_array($to) && (!is_object($to) || !($to instanceof \Iterator))){
				
			$class = (is_object($to)) ? get_class($to) : 'not an object';
				
			throw new DevException('$to can be only string or array or object implementing Iterator. Was: '.gettype($to).' class: '.$class);
		}

		$aTo = (is_string($to)) ? (array)($to) : $to;

		$aHeaders = array();
		$aHeaders['From'] = $this->from;
		$aHeaders['Reply-To'] = $this->adminEmail;
		$headers = \Lampcms\prepareHeaders($aHeaders);
		d(print_r($aHeaders, 1).' $headers: '.$headers.' aTo: '.print_r($aTo, 1));
		$s = $subject;
		$b = $body;

		register_shutdown_function(function() use ($s, $b, $headers, $aTo, $func){

			$total = (is_array($aTo)) ? count($aTo) : $aTo->count();
			d('total '.$total);
			/**
			 * @todo deal with breaking up
			 * the long array/cursor into
			 * smaller chunks and send emails
			 * in groups on N then wait N seconds
			 * This is handled differently for cursors and for arrays
			 */

			foreach($aTo as $to){
				d('$to: '.print_r($to, 1));
				/**
				 * Deal with format of array when array
				 * is result of iterator_to_array($cur)
				 * where $cur is MongoCursor - result of
				 * find()
				 */
				if(is_array($to)){
					/**
					 * If callback function is passed to mail()
					 * then it must accept array or
					 * one user record as argument and must
					 * return either email address (string)
					 * or false if record should be skipped
					 * For example, if array contains something like this
					 * 'email' => user@email.com,
					 * 'e_ft' => null
					 *
					 * Which indicates that user does not want
					 * to receive emails on followed tag
					 *
					 * This is a way to pass callback to serve
					 * as a filter - to users who opted out
					 * or receiving emails on specific events
					 * will not receive them
					 *
					 * Since each opt-out flag is different, the
					 * each callback for specific type of mailing
					 * will also be different.
					 *
					 */
					if(is_callable($func)) {
						$to = $func($to);
					} else {
						if(!empty($to['email'])) {
							$to = $to['email'];
						}
					}

				}

				if(empty($to) || !is_string($to)) {
					d('skipping email '.$to);
					continue;
				}

				if(true !== \mail($to, $s, $b, $headers)){

					\d('Server was unable to send out email at this time');
				}
			}

		} );


		return true;
	}

}