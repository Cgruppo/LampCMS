<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is lisensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 * 	  the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website's Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attibutes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2011 (or current year) ExamNotes.net inc.
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: @package_version@
 *
 *
 */


namespace Lampcms;


/**
 *
 * Class represeints one question stored
 * in Mongo QUESTIONS collection
 * implements LampcmsResourceInterface
 *
 * @author Dmitri Snytkine
 *
 */
class Question extends MongoDoc implements Interfaces\Question, Interfaces\UpDownRatable
{
	/**
	 * Currently not used, was going to have
	 * method to get all answers for this question
	 * by quereing ansCollection
	 * but so far this is not required.
	 *
	 * It may be required later when implementhing
	 * something like an NNTP server
	 *
	 * @var string
	 */
	protected $ansCollection = 'ANSWERS';

	public function __construct(Registry $oRegistry, array $a = array()){

		parent::__construct($oRegistry, 'QUESTIONS', $a);
	}

	/**
	 * (non-PHPdoc)
	 * @see LampcmsResourceInterface::getResourceTypeId()
	 */
	public function getResourceTypeId(){
		return 'QUESTION';
	}

	/**
	 * (non-PHPdoc)
	 * @see ResourceInterface::getResourceId()
	 */
	public function getResourceId(){

		return $this->offsetGet('_id');
	}

	/**
	 * (non-PHPdoc)
	 * @see LampcmsResourceInterface::getDeletedTime()
	 */
	public function getDeletedTime(){

		return $this->offsetGet('i_del_ts');
	}

	/**
	 * (non-PHPdoc)
	 * @see LampcmsResourceInterface::getOwnerId()
	 */
	public function getOwnerId(){

		return $this->offsetGet('i_uid');
	}

	/**
	 * (non-PHPdoc)
	 * @see LampcmsResourceInterface::getLastModified()
	 */
	public function getLastModified(){

		return $this->offsetGet('i_lm_ts');
	}

	/**
	 * Get full (absolute) url for this question,
	 * including the http and our domain
	 *
	 * @return string url for this question
	 */
	public function getUrl(){

		return $this->oRegistry->Ini->SITE_URL.'/q'.$this->offsetGet('_id').'/'.$this->offsetGet('url');
	}

	/**
	 * Should return false if NOT closed
	 * otherwise either true or timestamp
	 * of when it was closed
	 *
	 * @todo change this to just return offsetGet('i_closed)
	 * it will return 0 if i_closed is not present
	 * because if the new way we going to handle non-existent
	 * offsets that start with 'i_' or end with 'id')
	 */
	public function isClosed(){
		$closed = $this->offsetGet('i_closed');

		return (empty($closed)) ? false : (int)$closed;
	}


	/**
	 * @return int number of answers this question has
	 */
	public function getAnswerCount(){

		return $this->offsetGet('i_num_ans');
	}

	/**
	 * Set time, reason for when question was closed
	 * as well as username and userid of user who closed it
	 *
	 * @param string $reason
	 * @param object $closer User who closed the question
	 *
	 * @return object $this
	 */
	public function setClosed(User $closer, $reason = null){
		$this->offsetSet('i_closed', time());
		$this->offsetSet('a_closed', array('username' => $closer->getDisplayName(),
		'i_uid' => $closer->getUid(),
		'av' => $closer->getAvatarSrc(),
		'reason' => $reason));

		return $this;
	}


	/**
	 *
	 * Mark this item as deleted but only
	 * if not already marked as deleted
	 *
	 * @param object User $user user marking this
	 * item as deleted
	 *
	 * @param string $reason optional reason for delete
	 *
	 * @return object $this
	 */
	public function setDeleted(User $user, $reason = null){
		if(0 === $this->getDeletedTime()){
			$this->offsetSet('i_del_ts', time());
			$this->offsetSet('a_deleted',
			array(
			'username' => $user->getDisplayName(),
			'i_uid' => $user->getUid(),
			'av' => $user->getAvatarSrc(),
			'reason' => $reason,
			'hts' => date('F j, Y g:i a T')
			)
			);
		}

		$this->updateLastModified();

		return $this;
	}


	/**
	 *
	 * Adds a_edited array of data to Question
	 *
	 * @param User $user
	 * @param string $reason reason for editing
	 *
	 * @return object $this
	 */
	public function setEdited(User $user, $reason = ''){

		$aEdited = $this->offsetGet('a_edited');
		if(empty($aEdited) || !is_array($aEdited)){
			$aEdited = array();
		}

		$aEdited[] = array(
			'username' => $user->getDisplayName(),
			'i_uid' => $user->getUid(),
			'av' => $user->getAvatarSrc(),
			'reason' => $reason,
			'hts' => date('F j, Y g:i a T'));

		$this->offsetSet('a_edited', $aEdited);

		$this->updateLastModified();

		return $this;
	}

	/**
	 *
	 * Set tags for this question
	 * It will also update "a_edited" array
	 * to record the retag action, records
	 * user who retagged, and "Retag" as reason for edit
	 * Will also update lastModified
	 *
	 * @param User $user object User who retagged this question
	 * @param array $tags array of tags
	 */
	public function retag(User $user, array $tags){

		$this->offsetSet('a_tags', $tags);
		$this->offsetSet('tags_html', \tplQtags::loop($tags, false));
		$this->offsetSet('tags_c', trim(\tplQtagsclass::loop($tags, false)));

		$this->setEdited($user, 'Retagged');

		return $this;
	}


	/**
	 * Must set the id of best_answer
	 * It is possible that question already has some
	 * answer as best answer, which means it's considered
	 * as 'answered'
	 * In case question was 'unanswered' we must also
	 * update UNANSWERED_TAGS
	 *
	 * @todo finish this to deal with ANSWERS collection:
	 * unset any other answer for this question as 'selected'
	 *
	 * @todo try to find a way to call this method from
	 * some type of global post-processing queue
	 * because it has to do several Mongo updates
	 * then it has to notify observers and observers may
	 * have some long tasks to do like sending out email
	 * notifications, unsetting keys from cache, etc.
	 * We can try to just pass anonymous function to register_shutdown_function()
	 * right from here. So we can call this method any time we have to
	 * but then it will deffer the execution untill the very end.
	 * This may be resource intensive if closue has to copy
	 * all objects in order to remember their state
	 *
	 *
	 * Must set status to 'accptd'
	 *
	 * @param int $qid id of answer
	 * @param bool $updateTags if true then will decrease count
	 * of unanswered tags in UNANSWERED_TAGS collection
	 *
	 */
	public function setBestAnswer($qid, $updateTags = true){
		$this->offsetSet('i_sel_ans', (int)$qid);

		/**
		 * If Question is still not 'answered', means
		 * no accepted answer,
		 * then since we are not changing its status
		 * to answered, we must update
		 * the count of unanswered tags, which
		 * is done via UnansweredTags object
		 */
		if($updateTags && ('accptd' !== $this->offsetGet('status'))){
			UnansweredTags::factory($this->oRegistry)->remove($this);
		}

		$this->offsetSet('status', 'accptd');

		/**
		 * @todo
		 * Get all answers, select one marked selected, unset it
		 * Set another one as selected
		 */

		return $this;
	}


	/**
	 * Increases i_ans by $inc, which is usually 1
	 * but can also be used to decrease the count, by
	 * passing a negative value
	 *
	 * (non-PHPdoc)
	 * @see QuestionInterface::increaseAnswerCount()
	 *
	 * @param int $inc
	 */
	public function updateAnswerCount($inc = 1){
		$iAns = $this->offsetGet('i_ans');
		d('$iAns '.$iAns );
		$newCount = max(0, ($iAns + $inc));
		d('$newCount: '.$newCount);

		/**
		 * Set new value of i_ans but make sure
		 * it will never be less than 0
		 * This is just an extra guard, should not
		 * really happened, but passing a negative value
		 * is possible when we need to decrease answer count,
		 * that's why we need this guard here.
		 */
		$this->offsetSet('i_ans',  $newCount);

		/**
		 * Change the status to answrd
		 * 'answrd' is not the same as 'accptd'
		 * it simply serves a purpose to set the style
		 * of div to not be red, but it still does not
		 * make the question 'answered'
		 */
		if($newCount > 0){
			$this->offsetSet('status', 'answrd');
		} else {
			$this->offsetSet('status', 'unans');
		}

		/**
		 * If new value is NOT 1 then set
		 * a_s (plural suffix) to 's'
		 */
		if(1 !== ($newCount)){
			$this->offsetSet('ans_s', 's');
		}

		$this->updateLastModified();
	}

	/**
	 * Set last modified timestamp (i_lm_ts)
	 *
	 * @return object $this
	 */
	public function updateLastModified(){
		$this->offsetSet('i_lm_ts', time());

		return $this;
	}


	/**
	 * Logic: For guests dont check question owner id
	 * For others: insert into QUESTION_VIEWS first as a way
	 * to test for duplicates.
	 * Duplicates are: same uid and same qid
	 * If no duplicate then also increase count of views for this
	 * question
	 *
	 * @todo try to run this as post-echo method via register_shutdown_function
	 * callback. This is not really resource intensive, but still...
	 * it checks for duplicate, checks viewer ID, etc...
	 * This also runs on every page view, and also since we use fsync when
	 * updating via MongoDoc object, it does require disk write.
	 *
	 *
	 * @return object $this
	 */
	public function increaseViews($inc = 1){
		/**
		 * @todo Don't count question owner view
		 * For this we must be able to get Viewer from Registry
		 *
		 * Filter out duplicate views
		 */
		$viewerId = $this->getRegistry()->Viewer->getUid();

		/**
		 * If guest, then don't check for dups
		 * @todo this will be a problem if we at least don't check
		 * for same session_id or ip address
		 */
		$viewerId = (0 === $viewerId) ? session_id() : $viewerId;

		$ownerID = $this->offsetGet('i_uid');

		d('$viewerId: '.$viewerId.' $ownerID: '.$ownerID);

		if( $viewerId === $ownerID){
			d('viewing own question');

			return $this;
		}

		$iViews = $this->offsetGet('i_views');

		/**
		 * If this is the first view, we will cheat a little
		 * and set the views to something between 3 and 9
		 * There will not be just 1 view, and this way we don't
		 * have to worry about the plural suffix
		 */
		if(0 === $iViews && (1 === $inc)) {
			$inc = rand(3, 9);
		}

		$collViews = $this->getRegistry()->Mongo->getCollection('QUESTION_VIEWS');
		$collViews->ensureIndex(array('uid' => 1, 'qid' => 1), array('unique' => true));
		$qid = (int)$this->offsetGet('_id');
		try{
			$collViews->insert(array('qid' => $qid, 'uid' => $viewerId, 'i_ts' => time()), array('safe' => true));
			$this->offsetSet('i_views', ($iViews + (int)$inc) );

			/**
			 * If new value is NOT 1 then set
			 * vw_s (plural suffix) to 's' otherwise
			 * must set to empty string because
			 * by default it's already set to 's'
			 */
			$this->offsetSet('vw_s', 's');

		} catch (\MongoException $e){
			d('duplicate view for qid '.$qid. ' uid: '.$viewerId);
		}

		return $this;

	}

	/**
	 * Process an UP vote for this question
	 *
	 *
	 * @param int $inc could be 1 or -1
	 */
	public function addUpVote($inc = 1){

		if($inc !== 1 && $inc !== -1){
			throw new \InvalidArgumentException('$inc can only be 1 or -1. Was: '.$inc);
		}

		$tmp = (int)$this->offsetGet('i_up');
		$score = (int)$this->offsetGet('i_votes');
		$total = ($score + $inc);

		$this->offsetSet('i_up',  max(0, ($tmp + $inc)) );
		$this->offsetSet('i_votes',  $total );

		/**
		 * Plural extension handling
		 */
		$v_s = (1 === abs($total) ) ? '' : 's';
		$this->offsetSet('v_s', $v_s);

		return $this;
	}

	public function addDownVote($inc = 1){

		if($inc !== 1 && $inc !== -1){
			throw new \InvalidArgumentException('$inc can only be 1 or -1. Was: '.$inc);
		}

		$tmp = (int)$this->offsetGet('i_down');
		$score = (int)$this->offsetGet('i_votes');
		$total = ($score - $inc);

		$this->offsetSet('i_down', max(0, ($tmp + $inc)) );
		/**
		 * Question can have negative score, so we allow it!
		 */
		$this->offsetSet('i_votes', $total );

		/**
		 * Plural extension handling
		 */
		$v_s = (1 === abs($total) ) ? '' : 's';
		$this->offsetSet('v_s', $v_s);

		return $this;
	}

	public function getVotesArray(){

		$a = array(
		'up' => $this->offsetGet('i_up'), 
		'down' => $this->offsetGet('i_down'),
		'score' => $this->offsetGet('i_votes'));

		return $a;
	}

	public function getScore(){
		return $this->offsetGet('i_votes');
	}
}
