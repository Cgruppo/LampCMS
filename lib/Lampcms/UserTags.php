<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is lisensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 * 	  the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website's Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attibutes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2011 (or current year) ExamNotes.net inc.
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: @package_version@
 *
 *
 */


namespace Lampcms;

/**
 * Class responsible for adding/updating
 * a per-user tags counter collection
 *
 * This collection will be used for displaying
 * per - user tag stats on user profile page
 * can also be used for data mining but for that
 * a separate script has to run periodically like
 * once a day and maintain $tag => users array
 *
 * @author Dmitri Snytkine
 *
 */
class UserTags extends LampcmsObject
{

	const USER_TAGS = 'USER_TAGS';

	public function __construct(Registry $oRegistry){
		$this->oRegistry = $oRegistry;
	}


	/**
	 * Add array of tags to per-user tags collection
	 *
	 * @param int $uid
	 * @param Question $oQuestion
	 */
	public function addTags($uid, Question $oQuestion){
		/**
		 * Questions that come from external APIs may not
		 * have any user associated with it, uid is 0 or null then
		 * in this case we should not attempt to
		 * insert user tags, just return
		 */
		if(empty($uid)){
			d('no uid, returning');
			return;
		}

		$uid = (int)$uid;

		$aTags = $oQuestion['a_tags'];
		d('$aTags: '.var_export($aTags, true));

		$coll = $this->oRegistry->Mongo->getCollection(self::USER_TAGS);
		$a = $coll->findOne(array('_id' => $uid));
		/**
		 * If there is not record of tags for this user yet,
		 * then we will make array with $tag => 1
		 * and will use that,
		 *
		 * otherwise loop over existing array of tags,
		 * increasing count, then sorting in descending
		 * order by count and same to collection
		 */
		if(empty($a)){

			$aTemp = array_count_values($aTags);
			d('aTemp: '.print_r($aTemp, 1));

		} else {
			$aTemp = $a['tags'];
			foreach($aTags as $t){
				if(array_key_exists($t, $aTemp)){
					$aTemp[$t] += 1;
				} else {
					$aTemp[$t] = 1;
				}
			}

			arsort($aTemp, SORT_NUMERIC);
		}

		$coll->save(array('_id' => $uid, 'tags' => $aTemp, 'i_count' => count($aTemp)), array('fsync' => true));

		return $this;
	}


	/**
	 *
	 * When question is marked deleted OR is retaged
	 * we must update the user tags to account
	 * for all tags in the removed question
	 *
	 * @param Question $oQuestion
	 */
	public function removeTags(Question $oQuestion){
		
		/**
		 * If question is deleted
		 * then dont update anything
		 * 
		 */
		$uid = $oQuestion->getOwnerId();
		d('uid '.$uid);

		$aTags = $oQuestion['a_tags'];
		d('$aTags: '.var_export($aTags, true));

		$coll = $this->oRegistry->Mongo->getCollection(self::USER_TAGS);
		$a = $coll->findOne(array('_id' => $uid));

		if(empty($a) || empty($a['tags'])){
			d('strange, but there are not user tags');
				
			return $this;
		}

		$aUserTags = $a['tags'];

		foreach($aTags as $t){
			if(array_key_exists($t, $aUserTags)){
				$aUserTags[$t] -= 1;
				if(0 === $aUserTags[$t]){
					unset($aUserTags[$t]);
				}
			}
		}
		
		arsort($aUserTags, SORT_NUMERIC);

		$coll->save(array('_id' => $uid, 'tags' => $aUserTags, 'i_count' => count($aUserTags)), array('fsync' => true));
		
		return $this;
	}

}
