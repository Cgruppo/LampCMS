<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is lisensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 * 	  the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website's Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attibutes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2011 (or current year) ExamNotes.net inc.
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: @package_version@
 *
 *
 */


namespace Lampcms;

use \Lampcms\Interfaces\FacebookUser;
/**
 * Class for working with Facebook REST Oauth based API
 * @author Dmitri Snytkine
 *
 *
 */
class Facebook extends ExternalAuth
{
	protected $wallUpdateUrl = 'http://graph.facebook.com/%s/feed';

	/**
	 * Url of facebook API
	 * @var string
	 */
	protected $graphUrl = 'https://graph.facebook.com/me?access_token=';

	/**
	 * Object User that we either found
	 * or created new user
	 *
	 * @var object which extends User
	 */
	protected $oUser;


	/**
	 * access token we get from fb cookie
	 *
	 * @var string
	 */
	protected $sAccessToken = null;

	/**
	 * Facebook Application ID
	 * You get this by setting up your own application on facebook
	 * here: http://www.facebook.com/developers/
	 *
	 * @var string
	 */
	protected $sAppId = null;


	/**
	 * Object returned by \Lampcms\Curl
	 *
	 * @var object
	 */
	protected $oResponse;

	/**
	 * Object of type \Lampcms\Curl;
	 * @var object
	 */
	protected $oHTTP;


	/**
	 * Array of data returned from Facebook server
	 * @var array
	 */
	protected $aFbUserData = array();

	protected function __construct(Registry $oRegistry, FacebookUser $oUser = null)
	{
		parent::__construct($oRegistry);
		$this->oUser = (null !== $oUser) ? $oUser : $oRegistry->Viewer;
		$this->initHttpObject();
	}

	protected function initHttpObject()
	{
		//$this->oHTTP = new Http();
		//$this->oHTTP->setOption('timeout', 12);
		
		$this->oHTTP = new Curl();

		return $this;
	}

	/**
	 * Post message to the wall of user
	 *
	 * @param array $aData must include at least 'message' key
	 * with actual message to post some html allowed, some not.
	 * It's up to facebook to decide which html is not allowed
	 *
	 * @param object $oGlobal
	 * @param object $oUser user object or null
	 * in case of null the currently logged in user is used
	 */
	public static function postToWall(Registry $oRegistry, $aData, FacebookUser $oUser = null)
	{
		$o = new self($oRegistry, $oUser);
		$o->postUpdate($aData);

	}

	/**
	 * Post update to user Wall
	 *
	 *
	 * @param array $sMessage
	 */
	protected function postUpdate($aData)
	{
		if(is_string($aData)){
			$aData = array('message' => $aData);
		}
		if(is_array($aData)){
			$this->validateData($aData);
		}

		$facebookUid = $this->oUser->getFacebookUid(); //$this->oUser->facebook_uid;
		$facebookToken = $this->oUser->getFacebookToken();

		d('$facebookUid: '.$facebookUid.' $facebookToken: '.$facebookToken);

		if(empty($facebookUid) || empty($facebookToken)){
			d('User is not connected with Facebook');

			return $this;
		}

		$url = 'https://graph.facebook.com/me/feed';
		d('cp url: '.$url);;
		try{
			//$this->oHTTP->setMethod(HTTP_METH_POST);
			//$this->oHTTP->setUrl($url);
			//$this->oHTTP->setPostFields($aData);
			//$postFields = $this->oHTTP->getPostFields();
			//$this->oHTTP->send();
			
			$this->oHTTP->getDocument($urlnull, null, array('formVars' => $aData));
			$retCode = $this->oHTTP->getHttpResponseCode();
			d('retCode: '.$retCode.' resp: '.$this->oHTTP->getResponseBody());
		} catch(HttpTimeoutException $e ){
			d('Request to Facebook server timedout');
			throw new FacebookApiException('Request to Facebook server timed out. Please try again later');
		} catch(Http401Exception $e){
			d('Unauthorized to get data from Facebook, most likely user unjoined the site');
			$this->revokeFcauth();
			throw new FacebookApiException('Anauthorized with Facebook');
		} catch(HttpResponseCodeException $e){
			e('LampcmsError Facebook response exception: '.$e->getHttpCode().' '.$e->getMessage());
			/**
			 * The non-200 response code means there is some kind
			 * of error, maybe authorization failed or something like that,
			 * or maybe Facebook server was acting up,
			 * in this case it is better to delete cookies
			 * so that we dont go through these steps again.
			 * User will just have to re-do the login fir GFC step
			 */

			throw new FacebookApiException('Error during authentication with Friend Connect server');
		}catch (\Exception $e){
			e('Unable to post: '.$e->getMessage().' code: '.$e->getCode());
		}

		d('cp');

		return $this;
	}

	/**
	 * Validation to make sure data array
	 * has required keys 'message'
	 * @param unknown_type $aData
	 */
	protected function validateData(array &$aData)
	{
		if(empty($aData['message'])){
			throw new FacebookApiException('array of data must contain key "message" and its value cannot be empty');
		}

		if(empty($aData['access_token'])){
			$aData['access_token'] = $this->oUser->getFacebookToken();
		}
	}


	/**
	 * In case we got the 401 Error this means
	 * user is no longer authorizing us to post
	 * to wall
	 *
	 * What do we do?
	 * We can delete from USERS_FACEBOOK
	 * or just mark it or just remove the access token
	 *
	 * But what if user only remove one permission like
	 * to post updates or to post while offline?
	 *
	 * but still authorizes us to do stuff like
	 * get email address?
	 *
	 *@todo finish this
	 */
	protected function revokeFacebookConnect()
	{
		/**
		 * Why uid is 0?
		 * This means user viewer is not logged in, but why?
		 *
		 *
		 * @var unknown_type
		 */
		d('$this->oUser: '.get_class($this->oUser).' '.print_r($this->oUser->getArrayCopy(), 1));

		$this->oUser->revokeFacebookConnect();

		return $this;
	}
}

