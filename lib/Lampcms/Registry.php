<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is lisensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 * 	  the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website's Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attibutes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2011 (or current year) ExamNotes.net inc.
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: @package_version@
 *
 *
 */


namespace Lampcms;


/**
 * Dependency injection based registry
 * object.
 *
 * Pattern inspired by this slide show by Fabien Potencier
 * http://www.slideshare.net/fabpot/dependency-injectionzendcon2010
 *
 * Makes shared (singleton) and non-shared objects
 * on demand (lazy instantiation)
 *
 * You must manually add the logic for objects that
 * this class will be instantiating in init() method
 * This is the most effecient way to do dependency injection
 * While not as flexible, it is much faster than using
 * external xml config file
 *
 * It's still flexible enough, you just have to manually edit
 * init() method body when you want a new class to be
 * handled by this object
 *
 * @author Dmitri Snytkine
 *
 */
class Registry implements Interfaces\LampcmsObject
{
	protected static $instance;

	protected $values = array();

	/**
	 * Add known classes to this injector
	 * This is important to add all classes
	 * that are going to be handled by this injector here
	 * This is the most efficient way to use injector,
	 * other way is to get some type of xml config,
	 * parse it and load the injector via __set or asShared
	 *
	 */
	protected function __construct(){
		$this->init();
	}


	public function __destruct(){

	}

	public function __clone(){
		throw new \LogicException('Thau shall not clone the singleton object');
	}

	/**
	 * @todo
	 * add
	 * Tr (needs Langs (needs Mongo))
	 * it will be using oMongo, no Cache, so... you know...
	 * maybe we don't even need Langs anymore?
	 *
	 */
	protected function init(){

		$this->values['Request'] = $this->asShared(function ($c) {
			return Request::factory();
		});

		$this->values['Ini'] = $this->asShared(function ($c) {
			return new Ini();
		});

		$this->values['Mongo'] = $this->asShared(function ($c) {
			return new Mongo($c->Ini);
		});


		$this->values['Db'] = $this->asShared(function ($c) {
			return new DB($c);
		});

		$this->values['Incrementor'] = $this->asShared(function ($c) {
			return new MongoIncrementor($c->Mongo);
		});

		$this->values['Cache'] = $this->asShared(function ($c) {
			return new Cache($c);
		});


		/**
		 * Our main default EventDispatcher
		 * singleton pattern
		 *
		 */
		$this->values['Dispatcher'] = $this->asShared(function ($c) {
			return new Event\Dispatcher();
		});



		/**
		 * Resource object is not singleton
		 * we want new instance every time
		 * It will inject $this as dependency
		 */
		$this->__set('MongoDoc', function($c){
			return new MongoDoc($c);
		});

		/**
		 * Resource object is not singleton
		 * we want new instance every time
		 * It will inject $this as dependency
		 */
		$this->__set('Resource', function($c){
			return new Resource($c);
		});

		return $this;
	}

	public static function getInstance(){
		if(!isset(self::$instance)){
			self::$instance = new self();
		}

		return self::$instance;
	}

	/**
	 * Cannot call this from constructor
	 * because this object instantiated before
	 * any autoloaders are defined.
	 *
	 * We cannot just use class names without the
	 * include statement yet.
	 *
	 * Call this method only after the !inc.php has been loaded
	 * somewhere at the end of !inc.php is fine.
	 */
	public function registerObservers($section = 'OBSERVERS'){

		$aObservers = $this->__get('Ini')->getSection($section);

		if(!empty($aObservers)){
			foreach($aObservers as $key => $className){
				//$observer = new $className($this);
				$this->__get('Dispatcher')->attach($className::factory($this));
			}
		}

		return $this;
	}



	public function __set($id, $value) {
		$this->values[$id] = $value;
	}


	public function __get($id) {

		if('Mongo' === substr($id, 0, 5) && (strlen($id) > 5) ){
			$collName = strtoupper(substr($id, 5));
			$o = $this->values['MongoDoc']($this);
			$o->setCollectionName($collName);

			return $o;
		}

		if (!isset($this->values[$id])){
			//throw new InvalidArgumentException(sprintf('Value "%s" is not defined.', $id));
			e(sprintf('Value "%s" is not defined.', $id));

			return null;
		}

		if (is_callable($this->values[$id])) {
			return $this->values[$id]($this);
		} else {
			return $this->values[$id];
		}
	}


	function asShared($callable) {
		return function ($c) use ($callable) {
			static $object;
			if (is_null($object)) {
				$object = $callable($c);
			}

			return $object;
		};
	}


	/**
	 * Return the language
	 * that will be used as currentLanguage
	 * the value is computed in this order:
	 * try $_SESSION['lang'],
	 * try $_COOKIE['lang']
	 * if still not found, use DEFAULT_LANG
	 * from config.ini
	 *
	 *
	 * @return string value of currentLanguage
	 * which is usually a two-letter abbreviation like 'en'
	 *
	 */
	public function getCurrentLang()
	{
		/**
		 * Use the lang from the Viewer object?
		 * Maybe, but the problem is that in order to set
		 * the lang in new user object we need to somehow
		 * get the value of default lang, using cookie
		 * This is in case user selected the 'lang' drop-down
		 * menu before the user was even registered, this way
		 * we can use that value at the time user registers
		 *
		 * But still, if user is already registered and NOT Guest,
		 * we should use the value from user object!
		 * Enter description here ...
		 * @var unknown_type
		 */
		$oViewer = $this->__get('Viewer');
		if(!$oViewer->isGuest()){

			return $oViewer->offsetGet('lang');
		}

		if (isset($_SESSION) && !empty($_SESSION['lang'])) {
			return $_SESSION['lang'];
		}

		if (isset($_COOKIE) && !empty($_COOKIE['lang'])) {
			$_SESSION['lang'] = $_COOKIE['lang'];

			return $_COOKIE['lang'];
		}

		$defaultLang = DEFAULT_LANG;

		if (isset($_COOKIE)) {
			$_COOKIE['lang'] = $defaultLang;
		}

		if (isset($_SESSION)) {
			$_SESSION['lang'] = $defaultLang;
		}

		return $defaultLang;
	}

	/**
	 * Get unique hash code for the object
	 * This code uniquely identifies an object,
	 * even if 2 objects are of the same class
	 * and have exactly the same properties, they still
	 * are uniquely identified by php
	 *
	 * @return string
	 */
	public function hashCode()
	{
		return spl_object_hash($this);
	}

	/**
	 * Getter of the class name
	 * @return string the class name of this object
	 */
	public function getClass()
	{
		return get_class($this);
	}

	/**
	 * Outputs the name and uniqe code of this object
	 * @return string
	 */
	public function __toString()
	{
		return 'object of type: '.$this->getClass().' hashCode: '.$this->hashCode();
	}
}

