/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is lisensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 * 	  the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website's Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attibutes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2011 (or current year) ExamNotes.net inc.
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: @package_version@
 *
 *
 */

/**
 * @todo some validation and just show alert on error!
 * 
 * @todo submit form via Ajax and on success when we get 'redirect' location in
 *       response we must clear local storage and redirect!
 * 
 * @todo setRequired(input, text) and use it to validate tags < 2, title < 10,
 *       body < 30 add validate()
 * 
 * @todo initEditor() must be a method which will: download all required
 *       external YUI2 scripts as well as the editor instantiation script
 *       itself! The instantiation script will require only the Y to be passed
 *       to constructor via Y.get() and then onSuccess of get() will init editor
 *       it will also look to see if there is oEditorConfig object on the page
 *       and if yes, then use it to decide which buttons to include
 * 
 */

if (top !== self) {
	alert('The URL ' + self.location.href
			+ ' cannot be viewed inside a frame.  You will be redirected.');
	top.location.href = self.location.href;
}

YUI({
	gallery : 'gallery-2010.08.18-17-12',
	modules : {
		'gallery-aui-skin-base' : {
			fullpath : 'http://yui.yahooapis.com/gallery-2010.08.18-17-12/build/gallery-aui-skin-base/css/gallery-aui-skin-base-min.css',
			type : 'css'
		},
		'gallery-aui-skin-classic' : {
			fullpath : 'http://yui.yahooapis.com/gallery-2010.08.18-17-12/build/gallery-aui-skin-classic/css/gallery-aui-skin-classic-min.css',
			type : 'css',
			requires : [ 'gallery-aui-skin-base' ]
		}
	}
		}).use('node', 'event', 'gallery-storage-lite', 'gallery-overlay-extras', 'gallery-aui-loading-mask', 'dd-plugin', 'transition', 'yui2-editor', 'yui2-resize', 'yui2-animation', 'io-form', 'json', 'imageloader', 'cookie', function(Y, result) {
	
	
	
	var oMetas = {}, // cache storage for resolved meta tags
	foldGroup, //
	revealComments, //
	YAHOO = Y.YUI2, //
	dnd = false, //
	res = Y.one('#body_preview'), //
	write = function(str) {
		var d = new Date();
		str += ' :: ' + d.toTimeString();
		if(res) {res.set('innerHTML', str);};
	}, //
	saveToStorage = function() {
		Y.StorageLite.on('storage-lite:ready', function() {
			var html = editor.saveHTML();
			Y.StorageLite.setItem(getStorageKey(), html);
			write('Draft saved..');
		});
	}, //

	eForm = Y.one('.qa_form'), //
	/**
	 * Ask Form Textarea
	 */
	eAskTA, //
	/**
	 * Current reputation score
	 * of viewer
	 */
	reputation, //
	/**
	 * id of current viewer
	 */
	viewerId = null, // 
	/**
	 * Flag indicates viewer is moderator (or admin)
	 */
	bModerator = 1, //
	/**
	 * Dom of Title input
	 */
	eInputTitle, //
	/**
	 * Dom of Tags input
	 */
	eInputTags, //
	/**
	 * Dom Div with instructions how to post tags
	 */
	eTagsHint, //
	/**
	 * Dom DIv with instructions how to post markdown
	 */
	eBodyHint, //
	/**
	 * Dom Div with hint on how to ask a question
	 */
	eTitleHint,
	/**
	 * Collection of elements that have com_hand class
	 */
	aComHand, //
	/**
	 * Object keeps track of votes for question. key is id, value number of
	 * clicks we can limit up to 8 vote clicks per resource, then we will simply
	 * NOT pass data to server.
	 * 
	 */
	oVotes = {}, // 
	/**
	 * YUI2 Editor object
	 */
	editor, //
	/**
	 * Facebook style alert modal
	 * 
	 * Modal popup, usually contains some small
	 * form or tools.
	 * It usually should be closed onSuccess
	 * of Ajax request
	 */
	oAlerter, //
	/**
	 * Array of loading masks widgets
	 */
	loadingMasks = [], //

	getStorageKey = function() {	
			var formName;
			if (!eForm) {
				return null;
			}

			return eForm.get('name');
	}, //

	/**
	 * Each question/answer is allowed up to 4 up and down votes, after that
	 * user can click on votes buttons untill he's blue in the face, nothing
	 * will be sent to server.
	 * 
	 * @return bool true if limit has not been reached false if limit has been
	 *         reached.
	 */
	incrementVoteCounter = function(qid) {
		var ret;
		Y.log('qid: ' + qid, 'warn');
		if (!oVotes.hasOwnProperty(qid)) {
			
			oVotes[qid] = 1;
			
		} else {

			oVotes[qid] = (oVotes[qid] + 1);
			// Y.log('new count: ' + oVotes[qid]);
		}

		ret = (oVotes[qid] < 5);
		// Y.log('ret: ' + ret);
		return ret;
	}, //

	/**
	 * Get timezone offset based on user clock
	 * 
	 * @return number of secord from UTC time can be negative
	 */
	getTZO = function() {
		var tzo, nd = new Date();
		tzo = (0 - (nd.getTimezoneOffset() * 60));

		return tzo;
	}, //
	
	
	/**
	 * Get value of meta tag
	 * @param string metaName 
	 * @param bool asNode if true then return
	 * the Node representing <meta> element
	 * 
	 * @todo use memoizer to cache resolved metas
	 * 
	 * @return mixed false if meta tag does not exist
	 * or string of meta element "content" or 
	 * YUI3 Node object if asNode (true) is passed
	 */
	_getMeta = function(metaName, asNode){
		var ret, node = Y.one('meta[name=' + metaName +']');
		Y.log('meta node for meta ' + metaName+ ' is: ' + node);
		if(!node){
			return false;
		}
		
		if(asNode){
			return node;
		}
		
		return node.get('content');
	}, //
	
	
	/**
	 * Attach loading mask to node
	 * and show it
	 * Also add loadingMask object
	 * to Y.LoadingMasks array
	 * so that later we can access them
	 * in order to hide masks
	 */
	showLoading = function(node) {
		var mymask;
		node = (!node) ? Y.one('.gbox') : node;
		mymask = node.plug(Y.LoadingMask, {
			background : '#000',
			strings : {
				loading : 'Loading'
			}
		}).loadingmask;
		if(!Y.loadingMasks){
			Y.loadingMasks = [];
		}
		Y.loadingMasks.push(mymask);
		mymask.show();
		
	}, //
	 /**
	  * Hide loading mask attached to node
	  * if no node is provided then
	  * hide all loadingMasks
	  * 
	  */
	hideLoading = function(node) {
		var mymask;			
		if (node && node.loadingmask) {
			node.loadingmask.hide();
		}
		if(Y.loadingMasks){
			while(Y.loadingMasks.length > 0){
				mymask = Y.loadingMasks.pop();
				mymask.hide();
			}
		}
	}, //
	
	/**
	 * Start Login with FriendConnect routine
	 * 
	 */
	initGfcSignup = function(){
		if (!google || !google.friendconnect) {
			Y.log('No google or google.friendconnect', 'error');
			return;
		}
		Y.log('have google and google.friendconnect');
		google.friendconnect.requestSignIn();
		
		return;
	},
	/**
	 * Handle click on thumbup/thumbdown link
	 * 
	 * @var object el YUI Node representing a vote link it has a href which
	 *      already includes the correct ID of question or answer
	 * 
	 */
	handleVote = function(el) {
		var id = el.get('id');

		switch (true) {
		case el.test('.thumbupon'):
			el.removeClass('thumbupon');
			el.addClass('thumbup');
			break;

		case el.test('.thumbup'):
			el.removeClass('thumbup');
			el.addClass('thumbupon');
			break;

		case el.test('.thumbdownon'):
			el.removeClass('thumbdownon');
			el.addClass('thumbdown');
			break;

		case el.test('.thumbdown'):
			el.removeClass('thumbdown');
			el.addClass('thumbdownon');

		}

		if (incrementVoteCounter(id)) {
			var request = Y.io(el.get('href'));
		}
	}, //
	/**
	 * Handles click on "like comment" icon
	 * Increases the likes count but only once
	 * per user per comment
	 * 
	 * @todo finish this to pass data to server
	 */
	handleLikeComment = function(el){
		var parent, likesdiv, likes, id = el.get('id');
		Y.log('liked comment id: ' + id);
		if(el.test('.thumbupon')){
			Y.log('already liked this comment');
			return;
		}
		el.addClass('thumbupon');
		id = id.substr(7);
		Y.log('processing like count for comment: ' + id);
		
		parent = el.ancestor("div");
		Y.log('parent" ' + parent);
		likesdiv = parent.next(".c_likes");
		likes = likesdiv.get("text");
		
		likes = (!likes) ? 0 : parseInt(likes, 10);
		Y.log('likes: ' + likes);
		likesdiv.set("text",  (likes + 1));
		Y.io('/index.php?a=likecomment&commentid=' + id);
		
	}, //
	/**
	 * Use Facebook UI to initiate
	 * promnt to post to user wall
	 * an invitation to join this site
	 */
	initFbInvite = function(target){
		if (!FB) {
			Y.log('No FB object', 'error');
			return;
		}

		var siteTitle = getMeta('site_title');
		var siteUrl = getMeta('site_url');
		var siteDescription = target.get('title');
		var caption = getMeta('site_description');
		Y.log('target title: ' + siteDescription);
		FB.ui({
			method : 'stream.publish',
			message : 'I joined this site with Facebook Connect button. You should check it out too',
			attachment : {
				name : siteTitle,
				caption : caption,
				description : siteDescription,
				href : siteUrl
			},
			action_links : [ {
				text : siteTitle,
				href : siteUrl
			} ],
			user_message_prompt : 'Invite your Facebook Friends to join this site'
		}, function(response) {
			if (response && response.post_id) {
				Y.log('Post was published to Wall');
			} else {
				Y.log('Post was not published to Walll', 'warn');
			}
		});
	}, //
	/**
	 * Handle form submit for
	 * forms inside the alerter (FB Overlay)
	 */
	handleModalForm = function(e){
		var form = e.currentTarget;
		e.halt();
		Y.log('handleModalForm el is: ' + form);
		var cfg = {
				method : 'POST',
				form : {
					id : form,
					useDisabled : true
				}
			};
			oAlerter.hide();
			showLoading();
			
			var request = Y.io('/index.php', cfg);
	},
	
	/**
	 * Handle form submit 
	 * comment form
	 */
	handleCommentForm = function(e){
		Y.log('handling handleCommentForm');
		
		var body, numChars, form = e.currentTarget;
		e.halt();
		e.preventDefault();
		Y.log('handleModalForm el is: ' + form);
		
		body = form.one("textarea[name=com_body]");
		numChars = body.get("value").length;
		if (body && (numChars < 10 )) {
			alert('Comment must be at least 10 characters long');
			return;
		}
		if (body && (numChars > 600 )) {
			alert('Comment must be at under 600 chars long. Please remove ' 
					+ (numChars - 600) + ' characters from your comment');
			return;
		}
		
		var cfg = {
				method : 'POST',
				form : {
					id : form,
					useDisabled : true
				}
			};
			if(oAlerter){
				oAlerter.hide();
			}
			showLoading(form.ancestor('div'));
            var request = Y.io('/index.php', cfg);
	},
	/**
	 * This function executes onClick on any link with class 'ajax'
	 */
	handleAjaxLinks = function(e) {
		var ancestor, res, rtype, restype, resID, fbappid, fbcookie, el = e.currentTarget;
		Y.log('el is ' + el + ' id is: ' + el.get('id'));
		var id = el.get('id');
		e.halt();
		e.preventDefault();
		switch (true) {
		case el.test('.vote'):
			if(ensureLogin()){
				handleVote(el);
			}
			break;
			
		case el.test('.c_like'):
			if(ensureLogin()){
				handleLikeComment(el);
			}
			break;
			
		case el.test('.fbsignup'):
			initFBSignup();
			break;
			
		case el.test('.gfcsignin'):
			Y.log('clicked gfcsignin');
			initGfcSignup();
			break;
			
		case el.test('.twsignin'):
			Y.log('clicked on twsignin.');
			Y.log('Twitter: ' + Twitter);
			Twitter.startDance();
			break;
			
		case (id == 'gfcset'):
			google.friendconnect.requestSettings();
			break;
			
		case (id == 'gfcinvite'):
			Y.log('clicked on gfcinvite.');
			google.friendconnect.requestInvite();
			break;
			
		case (id === 'fbinvite'):
			initFbInvite(el);
			break;
			
		case (id === 'twinvite'):
			oTweet = oSL.tweet.getInstance();
		    oTweet.show();
			break;
			
		case (id === 'logout'):
			e.preventDefault();
			Y.log('clicked logout');

			if(FB){
				Y.log('has FB');
				fbappid = getMeta('fbappid');
				Y.log('fbappid: ' + fbappid);
				FB.logout(function(response) {
					Y.log('FB response ' + response);
				});
				if (fbappid) {
					fbcookie = "fbs_" + fbappid;
					Y.log('fbcookie: ' + fbcookie);
					Y.Cookie.remove(fbcookie);
				}
			}
			
			if(google && google.friendconnect){
				Y.log('has GFC for logout');
				if (!window.gfc_timesloaded) {
				      window.gfc_timesloaded = 1;
				      Y.log('requesting gfc signout');
				      google.friendconnect.requestSignOut();
				      /**
				       * Must logout NOW!
				       * because we also have js in actual html page
				       * which is loaded BEFORE this script and it will
				       * reload the page WHEN it detects
				       * the FriendCoect callback (GFC will issue callback
				       * after the request signout)
				       * and so we will never get to 
				       * this script, thus will never call logout controller
				       * 
				       */
				      window.location.assign('/index.php?a=logout');
				    } else {
				      window.gfc_timesloaded++;
				    }
				    if (window.gfc_timesloaded > 1) {
				    	Y.log('gfc_timesloaded > 1');
				     //window.top.location.href = "/index.php?a=logout";
				    }

			}
			
			Y.later(500, this, function() {
				window.location.assign('/index.php?a=logout');
			});
			
			
			break;
			
		case el.test('.flag'):
			ancestor = el.ancestor("div.controls");
	
		if(ancestor){
		    restype = (ancestor.test('.question')) ? 'q' : 'a';
		    resID = ancestor.get('id');
		    resID = resID.substr(4);
		    
			} else {
				ancestor = el.ancestor("div.com_flag");
				if(ancestor){
					restype = 'c';
					resID = el.get('id');
				    resID = resID.substr(6);
				}
			}
		
			if(ancestor){
				showFlagForm({'rid' : resID, 'rtype' : restype});
			}
		
		   break;
		   
		case el.test('.retag'):
			ancestor = el.ancestor("div.controls");
		if(ancestor){
		    resID = ancestor.get('id');
		    resID = resID.substr(4);
		    showRetagForm(resID);
			}
		
		   break;
		   
		case el.test('.stick'):
			window.location.assign('/index.php?a=stick&qid=' + getMeta('qid'));
		
		   break;
		   
		case el.test('.unstick'):
			window.location.assign('/index.php?a=unstick&qid=' + getMeta('qid'));
		
		   break;
		   
		case el.test('.close'):
			ancestor = el.ancestor("div.controls");
		if(ancestor){
		    resID = ancestor.get('id');
		    resID = resID.substr(4);
		    showCloseForm(resID);
			}
		
		   break;
		   
		case el.test('.del'):
			ancestor = el.ancestor("div.controls");
			if(ancestor){
				resID = ancestor.get('id');
			    resID = resID.substr(4);
			    
				if(ancestor.test('.com_tools')){
					deleteComment(resID);
				} else{
						rtype = (ancestor.test('.question')) ? 'q' : 'a';
					    showDeleteForm({'rid' : resID, 'rtype' : rtype});
					}
				}
			
			break;
			
		case el.test('.edit'):
			ancestor = el.ancestor("div.controls");
			if(ancestor){
				resID = ancestor.get('id');
			    resID = resID.substr(4);
			    
				if(ancestor.test('.com_tools')){
					if(!isEditable(ancestor)){
						alert('You cannot edit comments that are older than ' + getMeta('comments_timeout') + ' minutes');
						return;
					} else {
						showEditComment(resID);
					}
				} else {
					restype = (ancestor.test('.question')) ? 'q' : 'a';
				    Y.log('restype: ' + restype + ' resID: ' + resID);
				    window.location.assign('/index.php?a=edit&rid='+resID+'&rtype='+restype);
					}
				}
			break;
			
		case el.test('.com_link'):
			e.preventDefault();
			showCommentForm(el);
			break;
			
		case el.test('.btn_shred'):
			if(ensureLogin()){
				showShredForm(el.get('id'));
			}
			break;
		
		}
	}, //

	

	// A function handler to use for successful requests:
	handleSuccess = function(ioId, o) {
		hideLoading();
		var scoreDiv, comDivID, eDiv, eRepliesDiv, sContentType = Y.Lang.trim(o.getResponseHeader("Content-Type"));
		if ('text/json; charset=UTF-8' !== sContentType) {
			alert('Invalid Content-Type header: ' + sContentType);
			return;
		}
		/**
		 * Check that we have o.responseText. Check that we have 'rcomment' in
		 * data after parsing json
		 * 
		 */
		if (o.responseText === undefined) {
			alert('No text in response');
			return;
		}

		Y.log('Content-Type: ' + sContentType, "info");
		Y.log("The success handler was called.  Id: " + ioId + ".", "info", "example");

		/**
		 * Parse json find 'replies' div under the comments div if not already
		 * exists then create one and append under comments div append div from
		 * response to 'replies' div scroll into view visually animate it
		 * (maybe)
		 */
		try {
			var data = Y.JSON.parse(o.responseText);
		} catch (e) {
			alert("Error parsing response object" + e);
			return;
		}

		if (data.exception) {
			
			if(data.type && 'Lampcms\\MustLoginException' === data.type){
				ensureLogin(true);
			} else {
				alert(data.exception);
			}
			//return;
		}
		
		
		if (data.alert) {
			alert(data.alert);
			//return;
		}
		
		if(data.reload){
			Y.log('have data.reload');
			if(data.reload > 0){
				Y.later(data.reload, this, function(){
					window.location.reload(true);
				});
			} else {
				window.location.reload(true);
			}
		}

		if (data.formError) {
			/**
			 * @todo write setFormError function to test if we have div with
			 *       form_err id then set its innerHTML otherwise just alert
			 *       error;
			 */
			Y.log('Form Error: ' + data.formError);
			alert(data.formError);
			return;
		}
		
		
		if(data.comment && data.comment.res && data.comment.html){
			Y.log('got comment');
			//Y.log('com_wrap is: ' + Y.one('#comm_wrap_' + data.comment.res));
			/**
			 * If data.comment has id 
			 * and div with comment-id exists
			 * then it is an edit,
			 * otherwise it is a new comment
			 */
			if(data.comment.id && Y.one('#comment-' + data.comment.id)){
				Y.log('this is an edit');
				Y.one('#comment-' + data.comment.id).replace(data.comment.html);
			} else {
				Y.one('#comm_wrap_' + data.comment.res).remove();
				Y.one('#comments-' + data.comment.res).insert(data.comment.html, Y.one('#comments-' + data.comment.res).one('.add_com'));
			}
			
			return;
			
		}

		if (data.vote && data.vote.hasOwnProperty('v') && data.vote.rid) {
			Y.log(data.vote.rid);
			scoreDiv = Y.one('#score' + data.vote.rid);
			Y.log('scoreDiv ' + scoreDiv);

			if (scoreDiv) {
				scoreDiv.set('innerHTML', data.vote.v);
			}
		} else {

			if (data.redirect || data.answer) {
				Y.StorageLite.removeItem(getStorageKey());
				if (data.redirect) {
					alert('Item saved! Redirecting to <br><a href="' + data.redirect + '">' + data.redirect + '</a>');
					// redirect in 1 second
					Y.later(1000, this, function() {
						window.location.assign(data.redirect);
					});
				}

				/**
				 * This is an answer table, append it to end of answers div
				 * @todo update answers count, change collor
				 * scrollIntoView
				 */
				if(Y.one("#answers")){
					Y.one("#answers").append(data.answer);
				}
			}
		}
	}, //

	handleFailure = function(ioId, o) {
		hideLoading();
		Y.log("The failure handler was called.  Id: " + ioId + ".", "info", "example");
		alert('Error occured. Server returned status ' + o.status + ' response: ' + o.statusText);
	};

	// Subscribe our handlers to IO's global custom events:
	Y.on('io:success', handleSuccess);
	Y.on('io:failure', handleFailure);
	//Y.on('io:complete', hideLoading);

	/**
	 * Submit question or answer form via ajax
	 */
	var MysubmitForm = function(e) {
			
		var mbody, title, tags, reason, form = e.currentTarget;
		
		Y.log('form is: ' + form);
		// var title_d = Y.one("#title_d").get("value"); // wtf?

		title = form.one("#id_title");
		if (title && (10 > title.get("value").length)) {
			alert('Please enter a descriptive title at least 10 characters long');
			e.halt();
			return;
		}

		tags = form.one("#id_tags");
		if (tags && (1 > tags.get("value").length)) {
			alert('Enter between 1 and 5 tags, separated by spaces');
			e.halt();
			return;
		}
		
		reason = form.one("#id_reason");
		if (reason && (1 > reason.get("value").length)) {
			alert('You must include reason for editing');
			e.halt();
			return;
		}
		//

		mbody = getEditedText();
		/**
		 * Replace attribute "codepreview" to "code" this way the final text
		 * submitted to server will have "code" attribute. The reason for this
		 * is that we have 2 types of code preview: one in preview div during
		 * editing and another is actual content of the view question/answers
		 * page.
		 * 
		 * Since the HighlightAll executes every time the content of editor
		 * changes we don't want this to also highlight the actual code on the
		 * question/answers that are already on the page, thus we need 2
		 * separate code previews
		 */
		//mbody = mbody.replace(/"codepreview"/g, '"code"');
		if (10 > mbody.length) {
			alert('Questions and answers must be at least 10 characters long');
			e.halt();
			return;
		}

		// editor.saveHTML();
		/**
		 * Instead of saveHTML() which will do cleanHTML yet again and will mess
		 * up our already cleaned body, we will just set the value of form's
		 * qbody textarea to the mbody which we already have and it's alread
		 * properly parsed, especially cleaned inside the 'pre' tags
		 */
		form.one("textarea[name=qbody]").set("value", mbody);
		/**
		 * Now run save to set the body of the form back from the editor into
		 * form
		 * 
		 * Maybe via set('value', html)? Will it work?
		 */
		/*
		 * e.halt(); return;
		 */
		Y.log('mbody: ' + mbody);

		var cfg = {
			method : 'POST',
			form : {
				id : form,
				useDisabled : true
			}
		};

		showLoading(Y.one(".form_wrap"));
		var request = Y.io('/index.php', cfg);

		e.halt();
		return false;

	};

	aComHand = Y.all('.com_hand');

	// alert('Got com_hand ' + aComHand);
	if (aComHand && !aComHand.isEmpty()) {
		aComHand.on('focus', oSL.getQuickRegForm);
	} else {

		/**
		 * Instantiate editor
		 */
		editor = new YAHOO.widget.Editor('id_qbody', {
			dompath : true, // without dompath resize does not work
			width : '660px',
			height : '180px',
			autoHeight : true,
			extracss : 'pre { margin-left: 10px; margin-right: 10px; padding: 2px; background-color: #EEE; } ',
			animate : true,
			toolbar : {
				titlebar : 'Editor',
				buttons : [ {
					group : 'saveclear',
					label : 'Save / New',
					buttons : [ {
						type : 'push',
						label : 'Save',
						value : 'save'
					}, {
						type : 'push',
						label : 'New',
						value : 'clear'
					} ]
				}, {
					group : 'textstyle',
					label : 'Font Style',
					buttons : [ {
						type : 'push',
						label : 'Bold CTRL + SHIFT + B',
						value : 'bold'
					}, {
						type : 'push',
						label : 'Italic CTRL + SHIFT + I',
						value : 'italic'
					}, {
						type : 'push',
						label : 'Underline CTRL + SHIFT + U',
						value : 'underline'
					}, {
						type : 'push',
						label : 'Strike Through',
						value : 'strikethrough'
					} ]
				}, {
					type : 'separator'
				}, {
					group : 'blockquote',
					label : 'Quote',
					buttons : [ {
						type : 'push',
						label : 'Indent',
						value : 'indent',
						disabled : true
					}, {
						type : 'push',
						label : 'Outdent',
						value : 'outdent',
						disabled : true
					} ]
				}, {
					type : 'separator'
				}, {
					group : 'indentlist',
					label : 'Lists',
					buttons : [ {
						type : 'push',
						label : 'Create an Unordered List',
						value : 'insertunorderedlist'
					}, {
						type : 'push',
						label : 'Create an Ordered List',
						value : 'insertorderedlist'
					} ]
				}, {
					type : 'separator'
				}, {
					group : 'insertitem',
					label : 'Link',
					buttons : [ {
						type : 'push',
						label : 'HTML Link CTRL + SHIFT + L',
						value : 'createlink',
						disabled : true
					}

					]
				}, {
					type : 'separator'
				}, {
					group : 'undoredo',
					label : 'Undo/Redo',
					buttons : [ {
						type : 'push',
						label : 'Undo',
						value : 'undo',
						disabled : true
					}, {
						type : 'push',
						label : 'Redo',
						value : 'redo',
						disabled : true
					}

					]
				} ]
			}
		});

		editor.on('toolbarLoaded', function() {

			this.on('afterNodeChange', function(o) {

				preview();

			}, this, true);

			/*
			 * this.on('editorKeyUp', function() { preview(); });
			 */


			/**
			 * Listen to "Clear" button click
			 */
			editor.toolbar.on('clearClick', function() {
				if (confirm('Are you sure you want to reset the Editor?')) {
					editor.setEditorHTML('<br>');
					write('Editor content cleared..');
				}
			});
			editor.toolbar.on('saveClick', saveToStorage);
		});

		editor.on('editorContentLoaded', function() {
			var ec = editor.get('element_cont');

			resize = new YAHOO.util.Resize(ec.get('element'), {
				handles : [ 'b', 'br' ],
				autoRatio : true,
				proxy : true,
				setSize : false

			});
			resize.on('startResize', function() {
				this.hide();
				this.set('disabled', true);
			}, editor, true);
			resize.on('resize', function(args) {
				var h = args.height;
				var th = (this.toolbar.get('element').clientHeight + 2);
				var dh = (this.dompath.clientHeight + 1);
				var newH = (h - th - dh);
				this.set('width', args.width + 'px');
				this.set('height', newH + 'px');
				this.set('disabled', false);
				this.show();
			}, editor, true);
		});

		
		Y.log('doing some storage lite stuff ' + !Y.one('#iedit'));
		if(!Y.one('#iedit')){
		Y.later(5000, editor, function() {
				if (editor.editorDirty) {
				editor.editorDirty = null;
				saveToStorage();
			}
		}, {}, true);
		}

		Y.StorageLite.on('storage-lite:ready', function() {
			var editorValue, body = Y.one('#id_qbody');
			editorValue = Y.StorageLite.getItem(getStorageKey());
			if (body && !Y.one('#iedit') && null !== editorValue && '' !== editorValue) {
				body.set('value', editorValue);
				write('Loaded content draft from Local Storage');
			} else {
				write('Editor ready');
			}

				editor.render();
			});
		
		/**
		 * Preview result html from editor
		 */
		var getEditedText = function() {
			var html = editor.getEditorHTML();
			html = editor.cleanHTML(html);
			
			return html;
		};

		var previewDiv = Y.one('#tmp_preview');

		var preview = function() {
			previewDiv = (previewDiv) ? previewDiv : null;
			if (previewDiv) {
				previewDiv.set('innerHTML', getEditedText());
			}

		};

		
	} // end if NOT com_hand, means if we going to use RTE
	
	var showFlagForm = function(o){
		var oAlert, form, faction = 'flagger';
		if(ensureLogin()){
			if(o.rtype && 'c' === o.rtype){
				faction = 'flagcomment';
			}
		form = '<div id="div_flag" style="text-align: left">'
+ '<form name="form_flag" action="/index.php">'
+ '<input type="hidden" name="a" value="' +faction+'">'
+ '<input type="hidden" name="rid" value="{rid}">'
+ '<input type="hidden" name="token" value="'+ getToken() +'">'
+ '<input type="hidden" name="qid" value="'+ getMeta('qid') +'">'
+ '<input type="hidden" name="rtype" value="{rtype}">'
+ '<input type="radio" name="reason" value="spam"><label> Spam</label><br>'
+ '<input type="radio" name="reason" value="inappropriate"><label> Inappropriate</label><br>'
+ '<hr>'
+ '<label for="id_note">Comments?</label>'
+ '<textarea name="note" cols="40" rows="2" style="display: block;"></textarea>'
+ '<input type="submit" class="btn" value="Report">'
+ '</form>'
+ '</div>';
		
		form = Y.Lang.sub(form, o);
		oAlert = getAlerter('<h3>Report to moderator</h3>');
	     oAlert.set("bodyContent", form);
	     oAlert.show(); 
		}
		
	};
	
	
	var showCloseForm = function(qid){
		var oAlert, form;
		if(ensureLogin()){
		form = '<div style="text-align: left">'
+ '<form name="form_close" id="id_close" action="/index.php">'
+ '<input type="hidden" name="a" value="close">'
+ '<input type="hidden" name="token" value="'+ getToken() +'">'
+ '<input type="hidden" name="qid" value="'+ qid +'">'
+ '<input type="radio" name="reason" value="Not a question" checked><label>Not a real question</label><br>'
+ '<input type="radio" name="reason" value="Off topic"><label>Way off Topic</label><br>'
+ '<input type="radio" name="reason" value="Unproductive debate"><label>Turned into unproductive debate</label><br>'
+ '<input type="radio" name="reason" value="Duplicate"><label>Duplicate question</label><br>'
+ '<hr>'
+ '<label for="id_note">Comments?</label>'
+ '<textarea name="note" cols="40" rows="2" style="display: block;"></textarea>'
+ '<input type="submit" class="btn" value="Close this question">'
+ '</form>'
+ '</div>';
		
		oAlert = getAlerter('<h3>Close this question</h3>');
	     oAlert.set("bodyContent", form);
	     oAlert.show(); 
		}
		
	};
	
	
	var showRetagForm = function(){
		var oAlert, form, oTags, sTags = '';
		if(ensureLogin()){
			oTags = Y.all('td.td_question > div.tgs a');
			Y.log('oTags count: ' + oTags.size());
			oTags.each(function(){
				sTags += this.get('text') + ' ';
			});
			sTags = Y.Lang.trimRight(sTags);
			Y.log('sTags: ' + sTags);
			
		form = '<div id="div_flag" style="text-align: left">'
+ '<form name="form_flag" id="id_flag" action="/index.php">'
+ '<input type="hidden" name="a" value="retag">'
+ '<input type="hidden" name="token" value="'+ getToken() +'">'
+ '<input type="hidden" name="qid" value="'+ getMeta('qid') +'">'
+ '<hr>'
+ '<label for="id_note">At least one tag, max 5 tags separated by spaces</label>'
+ '<input type="text" class="ta1" size="40" name="tags" value="'+sTags+'" style="display: block;"></input>'
+ '<br>'
+ '<input type="submit" class="btn" value="Save">'
+ '</form>'
+ '</div>';
		
		oAlert = getAlerter('<h3>Edit Tags</h3>');
	     oAlert.set("bodyContent", form);
	     oAlert.show(); 
		}
		
	};
	
	var deleteComment = function(resID){
		var comment, f, myform, cfg, request;
		if(confirm('Really delete this comment?')){
			comment = Y.one("#comment-" + resID);
			if(comment){
				myform = '<form name="form_del" action="/index.php">'
				+ '<input type="hidden" name="a" value="deletecomment">'
				+ '<input type="hidden" name="rid" value="' + resID + '">'
				+ '<input type="hidden" name="token" value="'+ getToken() +'">';
				
				f=comment.appendChild(myform);
				Y.log('f is: ' + f);
				cfg = {
					method : 'POST',
					form : {
						id : f,
						useDisabled : true
					}
				};
				
	            request = Y.io('/index.php', cfg);
	            Y.log('request: ' + request);
				comment.hide('fadeOut');
				
				Y.later(1000, comment, function(){
					comment.remove();
				});
				
			}
		}	
	};
	
	var showDeleteForm = function(o){
		var oAlert, form, banCheckbox = '', a='delete';
		if(ensureLogin()){
			if(o.rtype && 'c' === o.rtype){
				a = 'deletecomment';
			}
			
			if(isModerator()){
				banCheckbox = '<br><input type="checkbox" name="ban"><label> Ban poster</label><br>'
			}
			form = '<div id="div_del" style="text-align: left">'
				+ '<form name="form_del" action="/index.php">'
				+ '<input type="hidden" name="a" value="'+ a +'">'
				+ '<input type="hidden" name="rid" value="{rid}">'
				+ '<input type="hidden" name="token" value="'+ getToken() +'">'
				+ '<input type="hidden" name="qid" value="'+ getMeta('qid') +'">'
				+ '<input type="hidden" name="rtype" value="{rtype}">'
				+ '<hr>'
				+ '<label for="id_note">Reason for delete (optional)</label>'
				+ '<textarea name="note" cols="40" rows="2" style="display: block;"></textarea>'
				+ banCheckbox
				+ '<br><input type="submit" class="btn" value="Delete">'
				+ '</form>'
				+ '</div>';
						
						form = Y.Lang.sub(form, o);
						oAlert = getAlerter('<h3>Delete item</h3>');
					     oAlert.set("bodyContent", form);
					     oAlert.show(); 
		}
	};
	
	var showCommentForm = function(el){
		var form, reputation, resID;
		reputation = getReputation();
		Y.log('el: ' + el + 'reputation: ' + reputation);
		Y.log('rid' + el.get('id'));
		if(ensureLogin()){
		if( isModerator() || (reputation > 0) || el.test('.uid-' + getViewerId())){
			resID = el.get('id');
		    resID = resID.substr(8);
		    Y.log('resID ' + resID);
		
		    form = Y.one('#add-comment-' + resID);
		    if(!form){
		    	form = '<div id="comm_wrap_' + resID + '" class="fl cb">'
		    	+ '<form action="/index.php" id="add-comment-' + resID + '" class="comform" method="post">'
		    	+ '<input type="hidden" name="a" value="addcomment">'
		    	+ '<input type="hidden" name="rid" value="' + resID + '">'
		    	+ '<input type="hidden" name="token" value="'+ getToken() +'">'
		    	+ '<table class="cb fr tbl_comment">'
		    	+ '<tr><td width="60px" class="com_icons" valign="top"></td>'
		    	+ '<td class="com_main">'
		    	+ '<textarea name="com_body" cols="60" rows="3" class="com_bo" style="display: block; padding: 2px;"></textarea>'
		    	+ '</td>'
		    	+ '<td class="com_button" valign="top">'
		    	+ '<input type="submit" name="doit" class="btn_comment" value="comment">'
		    	+ '</td>'
		    	+ '</tr><tr><td></td><td colspan="2" class="lighttext">Enter at least 16 characters</td></tr>'
		    	+ '</table>'
		    	+ '</form></div>';
		
		    	el.insert(form, 'after');
		    	
		    } else {
		    	if(form._isHidden()){
		    		form.show('fadeIn');
		    	} else {
		    		form.hide('fadeOut');
		    	}
		    }
		
		
		} else {
			alert('You must have a reputation of at least 1<br>to be able to add comments');
			return;
			}
		}
		
		
	};
	
	var showEditComment = function(resID){
		var form, wrapDiv, body, content;
		/**
		 * Check for comment edit timeout
		 * and don't allow editing comments
		 * older than 5 minutes
		 */
		
		wrapDiv = Y.one("#comment-" + resID);
		Y.log('wrapDiv: ' + wrapDiv);
		if(wrapDiv){
			body = wrapDiv.one('.com_b');
			content = body.get('text');
			Y.log('body: ' + body);
			Y.log('text: ' + content);
			
			form = '<div id="comm_wrap_' + resID + '" class="fl cb">'
	    	+ '<form action="/index.php" id="edit-comment-' + resID + '" class="comform" method="post">'
	    	+ '<input type="hidden" name="a" value="editcomment">'
	    	+ '<input type="hidden" name="commentid" value="' + resID + '">'
	    	+ '<input type="hidden" name="token" value="'+ getToken() +'">'
	    	+ '<table class="cb fr tbl_comment">'
	    	+ '<tr><td width="60px" class="com_icons" valign="top"></td>'
	    	+ '<td class="com_main">'
	    	+ '<textarea name="com_body" cols="60" rows="4" class="com_bo" style="display: block; padding: 2px;">'+content+'</textarea>'
	    	+ '</td>'
	    	+ '<td class="com_button" valign="top">'
	    	+ '<input type="submit" name="doit" class="btn_comment" value="save">'
	    	+ '</td>'
	    	+ '</tr><tr><td></td><td colspan="2" class="lighttext">Enter at least 16 characters</td></tr>'
	    	+ '</table>'
	    	+ '</form></div>';
			
			wrapDiv.insert(form, 'replace');
		}
	};
	
	var showShredForm = function(uid){
		var id = uid.substr(5);
		Y.log('uid: ' +id);
		form = '<div id="div_del" style="text-align: left">'
			+ '<form name="form_shred" id="id_shred" action="/index.php">'
			+ '<input type="hidden" name="a" value="shred">'
			+ '<input type="hidden" name="uid" value="'+ id + '">'
			+ '<input type="hidden" name="token" value="'+ getToken() +'">'
			+ '<p>Shredding user will completely delete all posts made by the user<br>'
			+ 'as well as all user tags'
			+ '<br>It will also change user status to *deleted*'
			+ '<br>and ban all IP addresses ever used by that user</p>'
			+ '<p>Proceed only if you absolutely sure you want to do this'
			+ '<hr>'
			+ '<input type="submit" class="btn_shred" value="Shred">'
			+ '</form>'
			+ '</div>';
					
				oAlert = getAlerter('<h3>Shred User</h3>');
				oAlert.set("bodyContent", form);
				oAlert.show(); 
	};
	
	var setMeta = function(metaName, value){
		var node = getMeta(metaName, true);
		if(node && value){
			node.set('content', value);
		}
	};
	
	var ensureLogin = function(bForceAlert){
		Y.log('ensureLogin');
		var message;
		if(bForceAlert || !isLoggedIn()){
			message = '<div class="larger"><p>You must login to perform this action</p>'
			+ '<p>Please login or <a class="close" href="#" onClick=oSL.getQuickRegForm(); return false;>Click here to register</a></div>';

			getAlerter('Please Login').set("bodyContent", message).show();
		 	
		 	return false;
		}
		
		return true;
	};
	
	/**
	 * Get value of 'mytoken' meta tag which serves as a security token for form
	 * validation.
	 */
	var getToken = function() {		
		return getMeta('version_id');
	};
	
	/**
	 * Set (update) the value of meta name="mytoken" meta tag with the new value
	 */
	var setToken = function(val) {
		setMeta('version_id', val);
	};
	
	var getViewerId = function(){
		var uid;
		Y.log('starting getViewerId');
		if(null === viewerId){
			Y.log('viewerId not set');
			uid = getMeta('session_uid');
			Y.log('uid: ' + uid);
			viewerId = (!uid) ? 0 : parseInt(uid, 10);
		}
		
		return viewerId;
	};
	
	 /**
	 * Test to determine if page is being viewed by a logged in user a logged in
	 * user has the session-tid meta tag set to value of twitter userid
	 */
	var isLoggedIn = function() {
		
		var ret, uid = getViewerId();
		Y.log('isLoggedIn uid: ' + uid);
		ret = (uid && (uid !== '') && (uid !== '0'));

		return ret;
	};
	
	
	
	/**
	 * Check if current viewer is moderator
	 * 
	 * @return bool true if moderator or admin
	 */
	var isModerator = function(){
		var role;
		//Y.log('bModerator now : ' + bModerator, 'error');
		if(bModerator < 2){
			role = getMeta('role');
			if(role && (('administrator' == role)  || ('moderator' == role) )){
				bModerator = 3;
			} else {
				bModerator = 2;
			}
		} 
		
		return (3 === bModerator);
	};
	
	/**
	 * Get reputation score of current viewer
	 * 
	 * @return int reputation score
	 */
	var getReputation = function(){
		var score;
		if(!reputation){
			score = getMeta('rep');
			reputation = (!score) ? 1 : parseInt(score, 10);	
		}
		
		return reputation;
	};
	
	/**
	 * Add <span> elements inside .contols
	 * only if viewer is moderator or 
	 * has enough reputation to use them
	 */
	var addAdminControls = function(){
		
		var controls = Y.all('div.controls');
		Y.log('controls ' + controls);
		if(controls){
			Y.log('adding adminControls');
			controls.each(function(){
				Y.log('this is: ' + this);
				if(this.test('.question')){
					if(isModerator() || this.test('.uid-' + getViewerId()) || (500 < getReputation()) ){
							this.append(' <span class="ico retag ajax" title="Retag this item">retag</span>');
					}
					if(!Y.one('#closed') && (isModerator() || this.test('.uid-' + getViewerId()) ) ){
						this.append(' <span class="ico close ajax"  title="Close this question">close</span>');
					}
					if('administrator' == getMeta('role')){
						if(!this.test('.sticky')){
							this.append(' <span class="ico stick ajax"  title="Make sticky">stick</span>');
						} else {
							this.append(' <span title="Unstick" class="ico unstick ajax">unstick</span>');
						}
					}
			 	}
				
				/**
				 * If is moderator or Owner of item,
				 * meaning controls has class uid-1234
				 * where 1234 is also id of viewer  + getViewerId()
				 */
				if(isModerator() || this.test('.uid-' + getViewerId())  || 2000 < getReputation()){
					
					/**
					 * If is moderator or Owner of item,
					 * meaning controls has class uid-1234
					 * where 1234 is also id of viewer  + getViewerId()
					 */
					if(isModerator() || this.test('.uid-' + getViewerId())){
						this.append(' <span title="Delete "class="ico del ajax">delete</span>');
					}
					
					/**
					 * If this is a comment tool
					 * then check the timeout 
					 * and don't add edit link if comment
					 * is older than 5 minutes // || isEditable(this)
					 */	
					if(!this.test('.com_tools') || isEditable(this)){
						this.append(' <span  title="Edit" class="ico edit ajax">edit</span>');
					}
				}
				
			});	
		}
		
	};
	
	
	/**
	 * Check that comment is not older
	 * than 5 minutes.
	 * Comments older than 5 minutes are not editable
	 * unless viewer is moderator
	 */
	var isEditable = function(controls){
		
		var timeOfComment, timeDiff, maxDiff;
		Y.log('controls passed to isEditable: ' + controls);
		
		if(isModerator()){
			Y.log('isEditable does not apply to moderators');
			return true;
		}
		
		maxDiff = getMeta('comments_timeout');
		Y.log('maxDiff: ' + maxDiff);
		if(!maxDiff){
			Y.log('unable to resolve comments_timeout meta tag');
			return true;
		}
		
		/**
		 * Convert minutes to milliseconds
		 */
		maxDiff = maxDiff * 60000;
		timeOfComment = controls.one('div.com_ts').get('title');
		if(!timeOfComment){
			Y.log('unable to resolve timeOfComment meta tag');
			return true;
		}

		timeOfComment = new Date(timeOfComment);
		Y.log('timeOfComment: ' + timeOfComment);
		timeDiff = (Date.now() - timeOfComment.getTime());
		Y.log('timeDiff: ' +  timeDiff);
		
		if(timeDiff > maxDiff){
			Y.log('comment is older than maxDiff', 'warn');
			
			return false;
		}
		
		return true;
		
	};

	
	/**
	 * Start the Facebook Login process
	 * using Facebook Javascript API
	 */
	var initFBSignup = function() {
		var fbPerms = getMeta('fbperms');
		if (!fbPerms) {
			fbPerms = '';
		}
		if (FB) {
			FB.login(function(response) {
				if (response.session) {
					Y.log('FB Signed in');
					if (response.perms) {
						// user is logged in and granted some
						// permissions.
						// perms is a comma separated list of granted
						// permissions
						// alert('Granted perms: ' + response.perms);
						window.top.location.reload(true);
					} else {
						// user is logged in, but did not grant any
						// permissions
					}
				} else {
					// user is not logged in
				}
			}, {
				perms : fbPerms
			});
		}

		return;
	};

	
	/**
	 * Get fbOverlay, reuse existing one
	 */
	var getAlerter = function(header){
		if(!oAlerter){
			oAlerter = new Y.Overlay({
				srcNode : '#fbOverlay',
				width : '500px',
				height : '300px',
				zIndex : 100,
				centered : true,
				constrain : true,
				render : true,
				visible : false,
				plugins : [ 

				{
					fn : Y.Plugin.OverlayModal
				}, {
					fn : Y.Plugin.OverlayKeepaligned
				}

				]

			});

			Y.one('#hide-fbOverlay').on('click', function(){oAlerter.hide();});
		}
		
		if(!header){
			header = 'Alert';
		}
		oAlerter.set("headerContent", '<h3>'+ header + '</h3>');
		
		return oAlerter;
	};
	
	var getMeta = function(metaName, asNode){
		var ret, node;	
		Y.log('looking for meta: ' + metaName + ' oMetas ' + oMetas);
		if(!oMetas[metaName]){
			node = Y.one('meta[name=' + metaName +']');
			Y.log('meta node for meta ' + metaName+ ' is: ' + node);
			oMetas[metaName] = node;
		} else {
			Y.log('meta is already resolved to ' + oMetas[metaName], 'info');
		}
		
		if(!oMetas[metaName]){
			Y.log('no value in oMetas.metaName for ' + metaName);
			return false;
		}
		
		if(asNode){
			return oMetas[metaName];
		} 
		
		ret = oMetas[metaName].get('content');
		Y.log('ret: ' + ret);
		
		return ret;
		
	};
	
	revealComments = function(){
		var comments, limit = getMeta('max_comments');
		if(limit && 0 < parseInt(limit)){			
			comments = Y.all('div.nocomments');
			if(comments){
				comments.removeClass('nocomments');
			}
		}
	};
	
	var Twitter = {
			/**
			 * Popup window object
			 */
			popupWindow : null,


			/**
			 * Interval object There should be only one of this if we already have an
			 * interval then we should not start another login process OR clear previous
			 * interval first
			 */
			oInterval : null,

			/**
			 * Start the oAuth login process by opening the popup window
			 */
			startDance : function() {
				Y.log('1084 starting oAuth dance this is: ' + this, 'window'); // Object Twitter
				var popupParams = 'location=0,status=0,width=800,height=450,alwaysRaised=yes,modal=yes', mydomain = window.location.hostname;


				/**
				 * Prevent user from opening more than one Twitter oAuth popup windows.
				 * This is helpful when the already opened window has gone out of focus
				 * (turned into popunder) accedentally
				 * 
				 */
				if (this.popupWindow && !this.popupWindow.closed) {
					this.popupWindow.location.href = 'http://' + mydomain
							+ '/index.php?a=logintwitter';
					this.popupWindow.focus();
					return;
				}

				this.popupWindow = window.open('http://' + mydomain
						+ '/index.php?a=logintwitter', 'twitterWindow', popupParams);

				if (!this.popupWindow) {
					alert('Unable to open login window. Please make sure to disable popup blockers in your browser');
					return;
				}

				/**
				 * This is very important to cancel any already running intervaled jobs,
				 * otherwise the next one will override prev one but the job will still
				 * be running in the background, so it will never be cancelled,
				 * resulting in continuesly issuing asyncRequests to the server like
				 * crazy
				 * 
				 * This can happend when someone opens multiple browser windows by
				 * clickin on 'signin with twitter' several times
				 */
				if (this.oInterval) {
					// alert('1109 something is still running');
					window.clearInterval(this.oInterval);
					this.oInterval = null;
				}

				this.oInterval = window.setInterval(this.checkLogin, 500);
				Y.log('1085 this.oInterval ' + this.oInterval, 'warn');
			},

			/**
			 * This method is check via oInterval, every half a second to check if popup
			 * window has been closed on not. If popup has been closed then we assume
			 * that the first step in oAuth dance is done and can check with the server
			 * to see if session now has user object
			 */
			checkLogin : function() {
				Y.log('Checking login. this is ' + this, 'window'); // this is object Window

				var transaction, cObj;

				if (!Twitter.popupWindow || Twitter.popupWindow.closed) {

					Twitter.cancelIntervals();

					/**
					 * Now it just reload the page Simple, just like most other sites
					 * doing it.
					 * 
					 */
					window.location.reload(true);
				}
			},
			/**
			 * In case there are any jobs still running at intervals we must cancell the
			 * job and null the interval
			 * 
			 * This will also be called from the processLogin() method as well as from
			 * the checkLogin() when we detect that popup has been closed
			 */
			cancelIntervals : function() {

				Y.log('Cancellng pending intervals this: ' + this, 'window');
				if (this.oInterval) {
					Y.log(' 1131 killing interval');
					window.clearInterval(this.oInterval);
					this.oInterval = null;
				}
			},
			toString : function() {
				return 'object Twitter';
			}
		};
	
	revealComments();
	Y.on('submit', MysubmitForm, '.qa_form');
	//Y.on("click", handleAjaxLinks, ".ajax");
	//Y.delegate("click", handleAjaxLinks, "#lastdiv", 'a.ajax');
	Y.delegate("click", handleAjaxLinks, "body", '.ajax');
	/**
	 * Listening the clicks on links inside #lastdiv
	 * allows us to dynamically add modals and panels
	 * to lastdiv and already subscriebed listeners will
	 * just work
	 */
	//Y.delegate("click", handleAjaxLinks, "#qview-main", ".controls span, .ajax"); //, "a"
	/**
	 * Any forms inside the alerter modal window will be
	 * handled by handleModalForm()
	 */
	Y.delegate("submit", handleModalForm, "#fbOverlay", 'form');
	/**
	 * Any forms inside the add_com will be
	 * handled by handleModalForm() //handleCommentForm
	 */
	Y.delegate("submit", handleCommentForm, "#qview-body", '.comform');
	/**
	 * Any links with class .close inside the alerter modal
	 * window will also cause the modal alerter to close
	 */
	Y.delegate("click", function(){getAlerter().hide();}, "#fbOverlay", 'a.close');
	/**
	 * Replace default JS alert with out custom
	 * Fb looking alerter
	 */
	 window.alert = function(text) { 
		 var oAlert = getAlerter();
	     oAlert.set("bodyContent", text);
	     oAlert.show(); 
	 };
	 
	 
	 if(Y.one('#regdiv')) {
            Y.log('have regdiv');
			dnd = Y.Cookie.get("dnd");
			Y.log('dnd: ' + dnd);
			/**
			 * Don't show regform if use has 'dnd' (do not disturb) cookie
			 */
			if (!dnd) {
				Y.log('going to show regform');
				oSL.Regform.getInstance().show();
			}
		}
	
	 
	 foldGroup = new Y.ImgLoadGroup({
		   foldDistance: 2
		});
	 foldGroup.set('className', 'imgloader');
	 
	 addAdminControls();

});

