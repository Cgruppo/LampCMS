<?php
/**
 *
 * License, TERMS and CONDITIONS
 *
 * This software is lisensed under the GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * Please read the license here : http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * ATTRIBUTION REQUIRED
 * 4. All web pages generated by the use of this software, or at least
 * 	  the page that lists the recent questions (usually home page) must include
 *    a link to the http://www.lampcms.com and text of the link must indicate that
 *    the website\'s Questions/Answers functionality is powered by lampcms.com
 *    An example of acceptable link would be "Powered by <a href="http://www.lampcms.com">LampCMS</a>"
 *    The location of the link is not important, it can be in the footer of the page
 *    but it must not be hidden by style attibutes
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE FREEBSD PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This product includes GeoLite data created by MaxMind,
 *  available from http://www.maxmind.com/
 *
 *
 * @author     Dmitri Snytkine <cms@lampcms.com>
 * @copyright  2005-2011 (or current year) ExamNotes.net inc.
 * @license    http://www.gnu.org/licenses/lgpl-3.0.txt GNU LESSER GENERAL PUBLIC LICENSE (LGPL) version 3
 * @link       http://www.lampcms.com   Lampcms.com project
 * @version    Release: @package_version@
 *
 *
 */


namespace Lampcms;
require_once 'bootstrap.php';

require 'Fixtures/MockQuestion.php';


use Lampcms\Question;

/**
 * Run after UserTest, AnswerTest, CommentTest
 *
 */
class QuestionTest extends LampcmsUnitTestCase
{
	protected $oQuestion;

	public function setUp(){
		$this->oQuestion = new \Lampcms\MockQuestion(new Registry());
	}


	public function testScore(){
		$s = $this->oQuestion->getScore();

		$this->assertEquals(0, $s);
	}

	/**
	 *
	 * @depends testScore
	 */
	public function testAddVote(){

		$this->oQuestion->addDownVote();

		$this->assertEquals(-1, $this->oQuestion->getScore());

		$this->oQuestion->addUpVote()
		->addUpVote()
		->addUpVote();

		$this->assertEquals(2, $this->oQuestion->getScore());

	}


	public function testAddFollower(){
		$this->oQuestion->addFollower(999999999);

		$aFollowers = $this->oQuestion['a_flwrs'];
		$this->assertTrue(in_array(999999999, $aFollowers));
	}

	/**
	 *
	 * @depends testAddFollower
	 */
	public function testRemoveFollower(){
		$this->oQuestion->removeFollower(999999999);

		$aFollowers = $this->oQuestion['a_flwrs'];
		$this->assertFalse(in_array(999999999, $aFollowers));
	}


	public function testGetCommentsCount(){
		$this->assertTrue(2 === $this->oQuestion->getCommentsCount());
	}

	public function testGetOwnerId(){
		$this->assertTrue(3 === $this->oQuestion->getOwnerId());
	}

	public function testGetQuestionOwnerId(){
		$this->assertTrue(3 === $this->oQuestion->getQuestionOwnerId());
	}

	public function testgetResourceTypeId(){
		$this->assertEquals('QUESTION', $this->oQuestion->getResourceTypeId());
	}

	public function testGetQuestionId(){
		$this->assertEquals(510, $this->oQuestion->getQuestionId());
	}

	public function testGetAnswerCount(){
		$this->assertTrue(1 === $this->oQuestion->getAnswerCount());
	}

	/**
	 *
	 * @depends testGetAnswerCount
	 */
	public function testIncreaseAnswerCountTwice(){
		$this->oQuestion->updateAnswerCount()
		->updateAnswerCount();

		$this->assertTrue(3 === $this->oQuestion->getAnswerCount());
	}

	/**
	 *
	 * @depends testGetAnswerCount
	 */
	public function testDecreaseAnswerCountBelow1(){
		$this->oQuestion->updateAnswerCount(-5);

		$this->assertTrue(0 === $this->oQuestion->getAnswerCount());
		$this->assertTrue('unans' === $this->oQuestion->offsetGet('status'));
	}


	public function testGetLastModified(){
		$this->assertEquals(1305401334, $this->oQuestion->getLastModified());
	}

	/**
	 *
	 * @depends testGetLastModified
	 */
	public function testGetEtag(){
		$this->assertEquals(1305401334, $this->oQuestion->getEtag());
	}

	/**
	 *
	 * @depends testGetEtag
	 */
	public function testTouch(){
		$this->oQuestion->touch();
		$this->assertTrue((time() - $this->oQuestion->getEtag()) < 1);
		$this->assertTrue((time() - $this->oQuestion->getLastModified()) < 1);
	}


	/**
	 *
	 * @depends testGetCommentsCount
	 */
	public function testGetComments(){
		$a = $this->oQuestion->getComments();
		$this->assertTrue(511 === $a[0]['_id']);
		$this->assertTrue(512 === $a[1]['_id']);
	}


	public function testGetTitle(){
		$this->assertEquals('Mock Stub Post', $this->oQuestion->getTitle());
	}

	public function testGetBody(){
		$this->assertEquals('<span>This is a simple <em class="wtag">mock</em> question</span>', $this->oQuestion->getBody());
	}

	public function testGetUsername(){
		$this->assertEquals('user1', $this->oQuestion->getUsername());
	}


	public function testIsClosed(){
		$this->assertFalse($this->oQuestion->isClosed());
	}

	public function testSeoUrl(){
		$this->assertEquals('Mock-Stub-Post', $this->oQuestion->getSeoUrl());
	}



	/**
	 *
	 * @depends testGetComments
	 */
	public function testDeleteCommentComments(){
		$a = $this->oQuestion->deleteComment(511);
		$this->assertTrue(1 === $this->oQuestion->getCommentsCount());
	}

	public function testSave(){
		$oRegistry = new Registry();
		$id = $this->oQuestion->getQuestionId();

		$this->oQuestion->insert();
		$a = $oRegistry->Mongo->QUESTIONS->findOne(array('_id' => $id));
		$this->assertTrue(is_array($a) && count($a) > 0);
	}
}
